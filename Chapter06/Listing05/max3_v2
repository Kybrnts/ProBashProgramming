#!/bin/bash
#: Title       : Max3
#: Date        : 2016-05-18
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 2.0
#: Description : Sort three integers and store results in variables
#: Options     : N/A

## Inclusions
. "${BASH_SOURCE%/*}/../Listing02/valint" || exit 1 # Include valint() declaration

## Global variables 
declare -ri _GETTMOUT=30   # Maximum number of seconds to await on user input
declare -ri _MAXFAILS=3    # Maximum read input fails
declare _MAX3 _MID3 _MIN3  # Numbers to order storage

## Function declarations
getint() { #@ Prompt user, and read integer string from input
           #@ USAGE: getint NAME [ PROMPTSTRING ]
    ## Funtion header
    local ref_name=${1:?"$FUNCNAME: Missing name argument"}
    local prmptstr=${2:+"$2: "} # If not null or unset, append colon and space
    shift $#

    ## Local variables
    local intstring=    # Input string container
    local -i estat=0    # Read exit status storage 

    ## Prompt user and get input
    ## * Set prompt w/default input
    ## * Set input timeout 30 seconds
    ## * Store read value
    read -r -p "$prmptstr" -t $_GETTMOUT intstring
    ## Save exit status
    estat=$?
    ## Did we get input from user?
    if [ -z "$intstring" ]; then
	## Wase it due to timeout? (see help read for reference)
	[ $estat -gt 128 ] && printf "\n" # Move cursor to next line, skip prompt
	return 1                          # Let the calling environment know
    fi
    ## Write intstring's value in ref_name's name
    printf -v $ref_name "%s" "$intstring"    
}
getvalint() { #@ DESCRIPTION: Tries to read a valid random integer string from user and turns it int a integer
              #@ USAGE: getvalint NAME [ PROMPTSTRING ]
    ## Function header
    local ref_name=${1:?"$FUNCNAME: Missing argument as name"} # One of _MAX3, _MID3 or _MIN3
    local prmptstr=${2:-"Enter a whole number"}                # Prompt for getint()
    shift $#

    ## Local variables
    local inptstr=                                           # Current input string
    local -i fails=0                                         # Input read fails counter
    ## Randomize default input and its sign
    local -i dfltstring=$(( ((-1*$RANDOM % 2) < 0 ? -1 : 1)*$RANDOM )) 
    
    while [ $fails -lt $_MAXFAILS ]; do
	getint inptstr "$prmptstr ($dfltstring)"
	case $? in
	    0)  ## getint() succeeded, we can now test input string
		if ! valint "$inptstr"; then          # InValid input string?
		    printf "%s\n" "Invalid input read. Try again."
		else                                  # Valid input string?
		    printf -v $ref_name "%s" $inptstr # Print string to $ref_name value
		    break
		fi ;;
	    1) ## getint() failed, so use default input string (is already valid)
		printf -v $ref_name "%d" $dfltstring
		break ;;
	esac
	(( fails++ ))
    done
    if [ $fails -eq $_MAXFAILS ]; then
	return 1
    fi
}
_max3() { #@ DESCRIPTION: Sort 3 integers and store in globals $_MAX3, $_MID3 and $_MIN3
          #@ USAGE: _max3 INT INT INT    
    ## Funtion header
    ## Fail if not enouth args w/propper error message. Also INT values will be accepted
    local int1=${1:?"$FUNCNAME: Missing non-null argument"} 
    local int2=${2:?"$FUNCNAME: Missing non-null argument"}
    local int3=${3:?"$FUNCNAME: Missing non-null argument"}
    shift $#

    set -- $int1 $int2 $int3         # Now that we tested values we can use them
    unset int1 int2 int3             # Release used memory 
    
    ## Sort input values
    [ $1 -gt $2 ] && set -- $2 $1 $3  # If $1 is greater thatn $2 swap them
    [ $2 -gt $3 ] && set -- $1 $3 $2  # Now $1, $2 and $3 have been reasigned
    [ $1 -gt $2 ] && set -- $2 $1 $3 

    ## Store results in globals
    _MAX3=$3
    _MID3=$2
    _MIN3=$1 
}

main() {
    ## Function header
    shift $#
    
    ## Local variables
    local -r digits=5                       # Digits per random number to display
    local -r format=" %5s: %-5${digits}s\n" # Single line output format
    
    ## Try to get three random valid integers
    if ! getvalint _MAX3; then 
	printf "Error! Failed to read first valid integer\n" >&2
	return 1
    fi
    if ! getvalint _MID3 "Enter another whole number"; then 
	printf "Error! Failed to read second valid integer\n" >&2
	return 2
    fi
    if ! getvalint _MIN3 "Enter the the last whole number"; then
	printf "Error! Failed to read third valid integer\n" >&2
	return 3
    fi

    # Sort the three random numbers
    _max3 $_MAX3 $_MID3 $_MIN3

    ## Output results
    printf "$format" _MAX3 $_MAX3 _MID3 $_MID3 _MIN3 $_MIN3
}

## Run!
main "$@"

