#!/bin/bash
#: Title       : Max3
#: Date        : 2016-05-18
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.2
#: Description : Sort three integers and store results in array
#: Options     : N/A

## Inclusions
. "${0%/*}/../Listing02/valint" || exit 1 # Include valint() declaration

## Global variables 
declare -ri _GETTMOUT=30 # Maximum number of seconds to await on user input
declare -ri _MAXFAILS=3  # Maximum read input fails
declare -a _MAX3=()      # Numbers to order storage

## Function declarations
getint() { #@ Prompt user, and read integer string from input
           #@ USAGE: getint NAME [ PROMPTSTRING ]
    ## Funtion header
    local -n output=${1:?"$FUNCNAME: Missing argument as name"} # Declared as name (bash-4.x)
    local prmptstr=${2:+"$2: "}                                 # Not empty? add colon and space at end
    shift $#

    ## Local variables
    local intstring=    # Input string container
    local -i estat=0    # Read exit status storage

    ## Prompt user and get input
    ## * Set prompt w/default input
    ## * Set input timeout 30 seconds
    ## *Store read value
    read -p "$prmptstr" -t $_GETTMOUT -r intstring
    ## Save exit status
    estat=$?    
    ## Did we get input from user?
    if [ -z "$intstring" ]; then
	## Wase it due to timeout? (see help read for reference)
	[ $estat -gt 128 ] && printf "\n" # Move cursor to next line, skip prompt
	return 1                          # Let the calling environment know
    fi
    ## Write intstring's value to output (it's a reference)
    output=$intstring
}
val2decint() { #@ DESCRIPTION: Turns a valid integer string into arithmetic evaluable integer string
               #@ USAGE: val2decint VALID_INTSTRING NAME
    ## Funtion header
    local integer=${1:?"$FUNCNAME: Missing integer argument"}
    local -n output=${2:?"$FUNCNAME: Missing argument as name"} # Declared as name (bash-4.x)
    shift $#
    
    ## Strip left zeros from $integer, as they are not propperly handled by arithmetic evaluation.
    ## NOTE: Strings like "0099" and "-018" are valid integers as per valint(). But they are interpreted as octals by
    ##       arithmetic evaluation, and could fail when assigned to names with the integer attribute enabled (local -i).
    integer=${integer%%[^-]*}$(( 10#${integer#-} )) # First keep hyphen character if present (negative integers)
                                                    # Then replace unsigned $integer w/its decimal representation
    output=$integer                                 # Now it is safe to write it to output.
}
getvalint() { #@ DESCRIPTION: Tries to read a valid random integer string from user and stores it into array element
              #@ USAGE: getvalint NAME INDEX [ PROMPTSTRING ]
    ## Function header
    local -n output=${1:?"$FUNCNAME: Missing argument as name"} # Global _MAX name
    local -i index=${2:?"$FUNCNAME: Missing integer argument"}  # 1, 2 or 3
    local prmptstr=${3:-"Enter a whole number"}                 # Prompt for getint()
    shift $#

    ## Local variables
    local inptstr=                                           # Current input string
    local _vl2dcnt=                                          # val2decint output container
    local -i fails=0                                         # Input read fails counter
    ## Randomize default input and its sign
    local -i dfltstring=$(( ((-1*$RANDOM % 2) < 0 ? -1 : 1)*$RANDOM )) 
    
    while [ $fails -lt $_MAXFAILS ]; do
	getint inptstr "$prmptstr ($dfltstring)"
	case $? in
	    0)  ## getint() succeeded, we can now test input string
		if ! valint "$inptstr"; then     # InValid input string?
		    printf "%s\n" "Invalid input read. Try again."
		else                             # Valid input string?
		    val2decint $inptstr _vl2dcnt # Turn input string into integer
		    output[$index]=$_vl2dcnt     # Assign it to current index entry
		    # NOTE: It is not possible to pass an array element by name to val2decint()
		    break
		fi ;;
	    1) ## getint() failed, so use default input string (is already valid)
		output[$index]=$dfltstring
		break ;;
	esac
	(( fails++ ))
    done
    if [ $fails -eq $_MAXFAILS ]; then
	return 1
    fi
}
_max3() { #@ DESCRIPTION: Sort 3 integers and store in globals $_MAX3, $_MID3 and $_MIN3
          #@ USAGE: _max3 INT INT INT [NAME]
    ## Funtion header
    ## Fail if not enouth args w/propper error message. Also INT values will be accepted
    local -i int1=${1:?"$FUNCNAME: Missing integer argument"} 
    local -i int2=${2:?"$FUNCNAME: Missing integer argument"}
    local -i int3=${3:?"$FUNCNAME: Missing integer argument"}
    local -n _max3=${4:-_MAX3}
    shift $#

    set -- $int1 $int2 $int3         # Now that we tested values we can use them
    unset int1 int2 int3             # Release used memory 
    
    ## Sort input values (using arithmetic evaluation)
    (( $1 > $2 )) && set -- $2 $1 $3  # If $1 is greater thatn $2 swap them
    (( $2 > $3 )) && set -- $1 $3 $2  # Now $1, $2 and $3 have been reasigned
    (( $1 > $2 )) && set -- $2 $1 $3 

    ## Store results in globals
    _max3=( $3 $2 $1 )
}

main() {
    ## Function header
    shift $#
    
    ## Local variables
    local -r digits=5                       # Digits per random number to display
    local -r format=" %5s: %-5${digits}d\n" # Single line output format
    
    ## Try to get three random valid integers
    if ! getvalint _MAX3 0; then 
	printf "Error! Failed to read first valid integer\n" >&2
	return 1
    fi
    if ! getvalint _MAX3 1 "Enter another whole number"; then 
	printf "Error! Failed to read second valid integer\n" >&2
	return 2
    fi
    if ! getvalint _MAX3 2 "Enter the the last whole number"; then
	printf "Error! Failed to read third valid integer\n" >&2
	return 3
    fi

    # Sort the three random numbers
    _max3 $_MAX3 ${_MAX3[1]} ${_MAX3[2]}

    ## Output results
    printf "$format" _MAX3 $_MAX3 _MID3 ${_MAX3[1]} _MIN3 ${_MAX3[2]}
}

## Run!
main "$@"

