#: Title       : Utils
#: Date        : 2016-05-20
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.0
#: Description : Bash function declarations file
#:             : Adds usefull validation tests
#: Options     : N/A

## Function declarations
isunset() { #@ DESCRIPTION: Tests if NAME contained in $1 is unset (i.e. expands to null pointer)
            #@ USAGE: isunset NAME
    local name=${1:?"$FUNCNAME: Missing name argument"}
    shift $#

    ## Check if referenced value is not empty
    [ -z ${!name+x} ]
}
isset() { #@ DESCRIPTION: Tests if NAME contained in $1 is set (
          #@ USAGE:
    local name=${1:?"$FUNCNAME: Missing name argument"}
    shift $#
    
    ! isunset $name
}
substring() { #@ DESCRIPTION: Tests if $1 string is contained by string $2
              #@ USAGE: substring '[ STRING1 ]' '[ STRING2 ]'
    local substring=${1?"$FUNCNAME: Missing argument"}
    local string=${2?"$FUNCNAME: Missing argument"}
    shift $#

    case $string in                 ## Does string match substring w/additional left or right chars?
	*"$substring"*) return 0 ;; ## Yes, then it is a substring
    esac                            ##
    return 1                        ## No, hence it is not a substring
}
superstring() { #@ DESCRIPTION: Tests if $1 string contains string $2
                #@ USAGE: superstring '[ STRING1 ]' '[ STRING2 ]'
    local superstring=${1?"$FUNCNAME: Missing argument"}
    local string=${2?"$FUNCNAME: Missing argument"}
    shift $#
    
    substring "$string" "$superstring"
}
isempty() { #@ DESCRIPTION: Tests if $1 string is empty
            #@ USAGE: isempty '[ STRING ]'
    local string=${1?"$FUNCNAME: Missing argument"}
    shift $#
    
    ## Check if received string is susbstring of the null string
    substring "$string" ""
}
isnotempty() { #@ DESCRIPTION: Tests if $1 string is NOT empty
               #@ USAGE: isnotempty '[ STRING ]'
    local string=${1?"$FUNCNAME: Missing argument"}
    shift $#
    
    ## Check if received string is NOT empty
    ! isempty "$string"
}
validname() { #@ DESCRIPTION: Tests if $1 string is a valid shell variable name
              #@ USAGE: validname '[ STRING ]'
    local name=${1?"$FUNCNAME:Missing argument"}
    shift $#

    case $name in 
	## Fail if:
	## * Is empty;
	## * begins w/anything other than letter or underscore;
	## * contains anything other than a letter, a number or underscore.
	"" | [^a-zA-Z_]* | *[^a-zA-z0-9_]*) return 1 ;;
    esac
}
valint() { #@ DESCRIPTION: Tests if $1 string is a valid integer
	   #@ USAGE: valint '[ INTEGER ]'
    ## Funtion header
    ## Empty argument (empty strin) is accepted but not an unset (null) one.
    local integer=${1?"$FUNCNAME: Missing argument"}
    shift $#

    case ${integer#-} in           ## Leading hyphen removed to accept negative numbers
	"" | *[^0-9]*) return 1 ;; ## The string is empty or contains a non-digit character
    esac                           ## the whole number and nothing but the number
}
val2decint() { #@ DESCRIPTION: Turns a valid integer string into arithmetic evaluable integer string
               #@ USAGE: val2decint NAME '[ INT_STRING ]'
    ## Funtion header
    local ref_intstr=${1?"$FUNCNAME: Missing name argument"}
    local intstr=${2:?"$FUNCNAME: Missing valid integer argument"}
    shift $#
    
    local out_intstring="" ## Funtion output container
    
    ## Strip left zeros from $integer, as they are not propperly handled by arithmetic evaluation.
    ## NOTE: Strings like "0099" and "-018" are valid integers as per valint(). But they are interpreted as octals by
    ##       arithmetic evaluation, and could fail when assigned to names with the integer attribute enabled (local -i).
    out_intstr=${intstr%%[^-]*}$(( 10#${intstr#-} )) ## First keep hyphen character if present (negative integers)
                                                     ## Then replace unsigned $integer w/its decimal representation
    printf -v $ref_intstr "%s" "$intstr"             ## Now it is safe to write it to output.
    ## Using the atoi() function, example:
    ## * Declaring a local variable within the calling function:
    ##   local _vl2dcnt=""
    ## * Using it to get atoi's output val2decint _vl2dcnt "-099"
}
