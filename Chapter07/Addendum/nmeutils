#: Title       : Nmeutils
#: Date        : 2016-03-06
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.0.0
#: Description : Dash function declarations file
#:             : Adds usefull shell tools for names (references)
#: Options     : N/A

##
## Includes and needed externals
. /usr/local/lib/argerrmsgs || exit 1 ## Missing argument error message strings
##
## Declarations
if [ "X$_DEF_NMEUTILS" = X ]; then ## Do not include if already included
    readonly _DEF_NMEUTILS=:       ## Already included test flag  
    ##
    ## Function declarations -------------------------------------------------------------------------------------------
    valnme() { #@ DESCRIPTION: Tests if $1 string is a valid variable shell name.
               #@ USAGE: valnme '[ STRING ]'
        ## Function header
        set -- ${1+"$1"}
        : ${1?"valnme: $_MSNGERR_ARG"}   ## Require a set string (i.e. not the NULL pointer)
        case $1 in                       ## Fail if provided string is:
            "") return 1 ;;              ## * The null string;
            [!a-zA-Z_]*) return 2 ;;     ## * Begins w/any other than letter or underscore;
            *[!a-zA-Z0-9_]*) return 3 ;; ## * Contains any other than letter, number or underscore.
        esac
    }
    refnme() { #@ DESCRIPTION: Tests if $1 string is a valid name as per defined naming convention* this helps to avoid
               #@              colisions between local and global names passed as positionsl parameters. All valid names
               #@              as per this criterion MUST be valid variable shell names as well.
               #@              (*) Naming convention enforces the following to avoid colissions:
               #@              - User defined global variables MUST BE underscore-prefixed;
               #@              - NO underscore-prefixed LOCAL names are allowed;
               #@              - ANY name to be referenced (i.e. stored in a positional parameter) MUST BE underscore-prefixed.
               #@              It also recommends to prefix with "r_" local names holding global variable names.
               #@ USAGE: cnvname '[ STRING ]'
        set -- ${1+"$1"}
        : ${1?"valnme: $_MSNG_ARG_ERR_MSG"} ## Require a set string (i.e. not the NULL pointer)
        case $1 in                       ## Fail if:
            "") return 1 ;;              ## * Is the null string;
            [!_]*) return 2 ;;           ## * Do NOT start with a leading underscore, as per defined convention;
            *[!a-zA-Z0-9_]*) return 3 ;; ## * Contains any other than letter, number or underscore.
        esac
    }
    isset() { #@ DESCRIPTION: Tests if a NAME present in is set (i.e. is not the NULL ptr). One name is required. Given
              #@              names are checked to be valid shell names before the is-set check takes place, except when
              #@              using the optional -u switch. That disables check for improved performance, but must the
              #@              first argument when used.
              #@ USAGE: isset [ -u ] NAME
        ## Function header
        set -- ${1+"$1"} ${2+"$2"}    ## Accept at most only 2 pos. pars.
        : ${1?"isset: $_MSNGERR_ARG"} ## Require at least one argument
        case $1 in
            -u) ## First arg must be -u or a valid name, in this case -u (unsafe mode)
                : ${2?"setvar: $_MSNGERR_NMA"}  ## Reuqire a second argument (name)
                eval "[ \"\${$2+X}\" = X ]" ;;  ## Expands to X only when $2 is unset, where comparison succeeds
            *)  ## First arg must be -u or a valid name, ini this case a name (safe)
                valnme "$1" || { shift $#; ${1:?"isset: $_BADERR_NMA"}; } ## Require a valid name or finish execution
                eval "[ \"\${$1+X}\" = X ]" ;;                            ## Expands to X only when $1 is unset, in
        esac                                                              ## which case comparison succeeds
    }
    setvar() { #@ DESCRIPTION: Sets one or more variables to specified value by reference. At lest one name and value is
               #@              required, using the -n switch. Additional assignments may be specified. Any given name is
               #@              checked to be a valid shell name before the assignment takes place except when using -u,
               #@              where check is avoided for that specific variable. Values may be null, but not unset.
               #@ USAGE: setvar -[n|u] NAME '[ VALUE ]' [ -[n|u] NAME '[ VALUE ]' .. ]
        : ${1?"setvar: $_MSNGERR_ARG"} ## Require at least one argument
        while [ $# -ne 0 ]; do ## While we still have arguments, process them in groups of 3
            case $1 in
                -u) ## First of the group must be the -u or -n switch, in this case -u (set unsafe mode)
                    : ${2?"setvar: $_MSNGERR_NMA"}    ## Reuqire the following arg to be set as well (name)
                    : ${3?"setvar: $_MSNGERR_ARG"} ;; ## And the next one also (value)
                -n) ## First of the group must be the -n or -n switch, in this case -n (set safe mode)
                    : ${2?"setvar: $_MSNGERR_NMA"}                               ## Require two additional arguments
                    : ${3?"setvar: $_MSNGERR_ARG"}                               ## Also req. a valid name on second one
                    valnme "$2" || { shift $#; ${2?"setvar: $_BADERR_NMA"}; } ;; ## Or finish exec. showing the bad arg
                *)  ## Fail in any other case
                    shift $# ## Function header ends removing any aditional pos. pars.
                    ${1?"setvar: $_BADERR_ARG"} ;;
            esac
            eval "$2=\"\$3\"" ## Execute assignment
            shift 3           ## Clear all processed args
        done
    }
    getvar() { #@ DESCRIPTION: Gets the content's of the last provided name-to-read argument into the optionally first
               #@              provided name-to-write one; or if only one name is provided displays its content. At
               #@              least one name is required. given names are validated before any other action, except
               #@              when using the optional -u switch as the first argument.
               #@ USAGE getvar [ -u ] [ NAMEW ] NAMER
        ## Function header
        set -- ${1+"$1"} ${2+"$2"} ${3+"$3"} ## Accept at most only 3 pos. pars.
        : ${1?"getvar: $_MSNGERR_ARG"}       ## Require at least one argument
        case $1 in
            -u) ## First arg must be -u or a valid name, in this case -u (unsafe mode)
                : ${2?"setvar: $_MSNGERR_NMA"} ## Require an aditional argument
                case $# in
                    3) ## 3 Args? Then both name-to-read and to-write are present
                        isset -u "$3" || return 1            ## If name-to-read is unset fail gracefully
                        eval "setvar -u \"$2\" \"\$$3\"" ;;  ## Set name-to-write w/name-to-read value
                    *) ## 2 args only. Then only name-to-read was provided
                        isset -u "$2" || return 1                               ## If name-to-read is unset fail
                        eval "[ \"X\$$2\" = X ] || printf \"%s\n\" \"\$$2"\" ;; ## Display value if not null
                esac ;;
            *)  ## First arg must be -u or a valid name, in this case a name (safe mode)
                case $# in
                    3) ## 3 Args than first one was NOT -u? This is wrong
                        shift $#                       ## Discard all remaining args
                        ${1?"getvar: $_BADERR_ARG"} ;; ## Finish execution showing $1 is wrong
                    2) ## 2 args in safe mode, then name-to-read and to-write are present
                        valnme "$1" || { shift $#; ${1:?"getvar: $_BADERR_NMA"}; } ## Check for valid names or finish
                        valnme "$2" || { shift $#; ${2:?"getvar: $_BADERR_NMA"}; } ## execution showin the wrong args.
                        isset -u $2 || return 1                                    ## If name-to-read is unset fail
                        eval "setvar -u $1 \"\$$2\"" ;;                            ## It is safe to set first arg name
                    *) ## Single argument in safe mode, then only name-to-red was provided
                        valnme "$1" || { shift $#; ${1:?"getvar: $_BADERR_NMA"}; } ## Check for valid name or finish
                        isset -u $1 || return 1                                    ## If name-to-read is unset fail
                        eval "[ \"X\$$1\" = X ] || printf \"%s\n\" \"\$$1"\" ;;    ## Display name's content if not null
                esac ;;
        esac
    }
fi
