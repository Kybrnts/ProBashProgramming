#: Title       : Utils
#: Date        : 2016-06-21
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.0
#: Description : Bash function declarations file
#:             : Adds usefull set of validation tests
#: Options     : N/A

## Function declarations
isunset() { #@ DESCRIPTION: Tests if NAME contained in $1 is unset (i.e. expands to null pointer)
            #@ USAGE: isunset NAME
    local name=${1:?"$FUNCNAME: Missing name argument"}
    shift $#

    ## Check if referenced value is unset
    ## Expanded to "x" only if name is unset, in that case expansion will became a NOT null string
    [ -z ${!name+x} ]
}
isset() { #@ DESCRIPTION: Tests if NAME contained in $1 is set
          #@ USAGE: isset NAME
    local name=${1:?"$FUNCNAME: Missing name argument"}
    shift $# 

    ! isunset $name ## Names canNOT contain spaces, hence no quotting needed
}
substring() { #@ DESCRIPTION: Tests if $1 string is contained by string $2
              #@ USAGE: substring '[ STRING1 ]' '[ STRING2 ]'
    local substring=${1?"$FUNCNAME: Missing argument"}
    local string=${2?"$FUNCNAME: Missing argument"}
    shift $#

    case $string in                 ## Does string match substring w/additional left or right chars?
	*"$substring"*) return 0 ;; ## Yes, then it is a substring
    esac                            ##
    return 1                        ## No, hence it is not a substring
}
superstring() { #@ DESCRIPTION: Tests if $1 string contains string $2
                #@ USAGE: superstring '[ STRING1 ]' '[ STRING2 ]'
    local superstring=${1?"$FUNCNAME: Missing argument"}
    local string=${2?"$FUNCNAME: Missing argument"}
    shift $# 
    
    substring "$string" "$superstring"
}
isnull() { #@ DESCRIPTION: Tests if $1 string contains characters (other than '\0')
           #@ USAGE: isnull '[ STRING ]'
    local string=${1?"$FUNCNAME: Missing argument"}
    shift $#
    
    ## Check if received string is susbstring of the null string
    substring "$string" ""
}
isnotnull() { #@ DESCRIPTION: Tests if $1 string is NOT the null string
              #@ USAGE: isnotnull '[ STRING ]'
    local string=${1?"$FUNCNAME: Missing argument"}
    shift $#
    
    ## Check if received string is NOT null
    ! isnull "$string"
}
validname() { #@ DESCRIPTION: Tests if $1 string is a valid shell variable name
              #@ USAGE: validname '[ STRING ]'
    local name=${1?"$FUNCNAME:Missing argument"}
    shift $#

    case $name in 
	## Fail if:
	## * Is the null string;
	## * begins w/anything other than letter or underscore;
	## * contains anything other than a letter, a number or underscore.
	"" | [^a-zA-Z_]* | *[^a-zA-z0-9_]*) return 1 ;;
    esac
}
digitsonly() { #@ DESCRIPTION:
               #@ USAGE:
    local string=${1?"$FUNCNAME: Missing argument"}
    shift $#
    
    ## Test if the string is null or contains nondigit chars
    case $string in
	"" | *[0-9]*) return 1 ;;
    esac
}
valdecint() { #@ DESCRIPTION:
              #@ USAGE:
    local string=${1?"$FUNCNAME: Missing argument"}
    shift $#
    
    digitsonly "${integer#[-+]}"
}
validipv4() { #@ DESCRIPTION: test for a valid IP address string
            #@ USAGE: validip '[ DOTTED-QUAD ]'
    local dttd_quad=${1?"$FUNCNAME: Missing argument"}
    shift $#

    case $dttd_quad in
	## Reject the following:
	## * Empty (null string) dttd_quad;
	## * Anything other than digits and dots;
	## * Anything not ending in a digit
	"" | *[^0-9.]* | *[^0-9] ) return 1 ;;
    esac
    ## Change IFS to a dot, but only in this function
    local IFS=.
    ## Place the IP addresss into the positional parameters;
    ## After word splitting each element becomes a parameter
    set -- $dttd_quad
    [ $# -eq 4 ] && ## Must be four parameters
                    ## Each must be less than 256
    ## A default of 666 (which is invalid) is used if a parameter is empty
    ## All four parameters must pass the test
    [ ${1:-666} -le 255 ] && [ ${2:-666} -le 255 ] &&
    [ ${3:-666} -le 255 ] && [ ${4:-666} -le 255 ]
    ## NOTE: Formats other than dotted quads can be valid IP addresses, as in 127.1, 216.239.10085 and 3639551845.
}
