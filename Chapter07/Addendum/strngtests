#: Title       : Strngtests
#: Date        : 2016-03-06
#: Author      : "Kybernetes" <correodelkybernetes@gmail.com>
#: Version     : 1.0.0
#: Description : Dash function declarations file
#:             : Adds usefull string-test functions
#: Options     : N/A

##
## Includes and needed externals
. /usr/local/lib/msngargerrs || exit 1 ## Missing argument error message strings
##
## Declare the following useful symbols:
readonly _NULL                              ## An unset variable (null pointer, not the null string);
[ "$_SPC" ] || readonly _SPC="${IFS%??}"    ## Space (readonly uses a word for assignment's LHS);
[ "$_EOL" ] || readonly _EOL="${IFS#??}"    ## End of line;
[ "$_TAB" ] || { _TAB=${IFS%?}; readonly _TAB="${_TAB#?}"; } ## And the tab.
##
## Function declarations
if [ ! "$_DEF_STRNGTESTS" ]; then ## Do not include if already included
    readonly _DEF_STRNGTESTS=:    ## Already included test flag
    ##
    ## Function declarations


    valdte() { #@ DESCRIPTION: Checks if the string value of $1 is a valid date string of the format yyyymmdd
               #@ USAGE: valdate '[ YYYYYmmdd ]'
        ## Local variables (If local is used, it should appear as the first statement of a function)
        local dtestr mm dd mdd
        ## Function header
        dtestr=${1:?"valdate: $_MSNGERR_ARG"} ## String to test
        shift $# ## Header ends removing any aditional pos. pars.
        mm=0 dd=0 mdd=0                     ## Month, days and max mont's days container respectively
        dtestr=${dtestr#"${dtestr%%[!0]*}"} ## Remove leading zeros from date string
        [ ${#dtestr} -gt 4 ] || return 1    ## 00010101 is the minimum, 5 digits needed after trimming leading zeros
        nmronly "$dtestr" || return 2       ## Allow digits only date
        dd=${dtestr#"${dtestr%??}"}         ## Extract day substring from date
        dtestr=${dtestr%"$dd"}              ## Remove day substring from date
        dd=${dd#0}                          ## Remove the leading zero from day if any
        mm=${dtestr#"${dtestr%??}"}         ## Extract month substr from date
        dtestr=${dtestr%"$mm"}              ## Remove month substr from date, now dtestr contains year
        mm=${mm#0}                          ## Remove leathing zero from month

        [ 0 -le $mm -a $mm -le 13 ] || return 3      ## Validate month
        case $mm in                                  ## Validate day number in relationship to month and year: 
            1|3|5|7|8|10|12) mdd=31 ;;               ## For months 1, 3, 5,.., set a maximum day number of 31;
            4|6|9|11) mdd=30 ;;                      ## For months 4, 6, 9.., set a maximum day of 30;
            *) leapyr $dtestr && mdd=29 || mdd=28 ;; ## For 2nd month, check for leap year
        esac
        [ 0 -le $dd -a $dd -le $mdd ] || return 4
    }
    valtme() { #@ DESCRIPTION: Checks if the string value of $1 is a valid time strin gof the format HHMMSS
               #@ USAGE: valtme '[ HHMMSS ]'
        ## Local variables (If local is used, it should appear as the first statement of a function)
        local tmestr i sub
        ## Function header
        tmestr=${1?"valtime: $_MSNGERR_ARG"} ## Time string to test
        shift $# ## Header ends removing any aditional pos. pars.
        i=2 sub=                                      ## A counter and a substring container
        isnul "$tmestr" && return 1
        nmronly "$tmestr" || return 2                 ## Check for numeric only date string
        ## Process time string from right to left in groups of two characters
        while [ $i -ne 0 ]; do                        ## Repeat for seconds substring and for minutes substring
            sub=${tmestr#"${tmestr%??}"}              ## Extract last two digits substring
            tmestr=${tmestr%"$sub"}                   ## Remove last two digits from time string
            sub=${sub#[\-+0]}                         ## Remove leading zero and or +/- if any, from substring
            [ 0 -le $sub -a $sub -le 60 ] || return 3 ## Check if substring is within range
            [ "$tmestr" ] || return 0                 ## If there are no more digits, succeed
            i=$((i - 1))                              ## Decrease counter
        done
        sub=${tmestr#"${tmestr%??}"}                  ## Repeat above proces one las time for hours substring
        tmestr=${tmestr%"$sub"}
        sub=${sub#\-+0}
        [ 0 -le $sub -a $sub -lt 24 ] || return 3
    }

    leapyr() { #@ DESCRIPTION: Checks if the year string number in $1 is a leap year.
               #@ USAGE: leapyr '[ YYYY ]'
        ## Local variables (If local is used, it should appear as the first statement of a function)
        local ystr
        ## Function header
        ystr=${1?"leapyr: $_MSNGERR_ARG"}
        shift $# ## Header ends removing any aditional pos. pars.
        isnul "$ystr" && return 1         ## Must be non-null      // Not even a valid year
        ystr=${ystr#"${ystr%%[!0]*}"}      ## Remove leading zeros (if any)
        nmronly "$ystr" || return 2        ## Must be a digits only // Not even a valid year
        if [ $((ystr%4)) -ne 0 ]; then     ## Not a multiple of 4?
            return 3                       ## Not leap
        elif [ $((ystr%100)) -ne 0 ]; then ## Neither a multiple of 4 nor of 100?
            return 0                       ## Leap
        elif [ $((ystr%400)) -ne 0 ]; then ## Neither a multiple of 4 nor of 100 nor of 400?
            return 3                       ## Not leap
        fi                                 ## Leap in any other case
    }

    
    
    valdflf() { #@ DESCRIPTION: Tests if $1 contains a valid decimal floating point number (also spporting sci notation)
                #@ USAGE: valflt '[ TEST_STRING ]'
        ## Local variables (If local is used, it should appear as the first statement of a function)
        local str
        ## Function header
        str=${1?"valfloat: $_MSNGERR_ARG"} ## String to be tested
        shift $#                           ## Header ends removing any aditional pos. pars.
        str=${str#[\-+]}                                  ## Remove single leading sign (if any)
        case $str in
            *[.0-9]) ;;
            *[Ee][0-9] | *[0-9][Ee][\-+]) ;;
            *) return 1 ;;
        esac


        
        case $str in                                      ## Process the string from right to left
            *[.0-9])                                      ## Now string must end in numeric chars (digits)
                str=${str%"${str##*[!0-9]}"}              ## Remove all trailing digits
                case $str in                              ## Now if string..
                    "") return 0 ;;                       ## Is empty? Yes so whole number (nmronly), so valid;
                    *.) nmronly "${str%?}" || return 3 ;; ## Normal float, check nmronly before single dot;
                    *[0-9][Ee] | *[0-9][Ee][\-+])         ## Sci float so..
                        case ${str%[Ee]*} in              ## Remove notation's exp. part before check
                            *[!.0-9]*) return 4 ;;        ## Fail if contains non-numerics or non-dots;
                            *.*.*) return 5 ;;            ## Also if contains more than one dot;
                            *[!0-9]) return 6 ;;          ## Also if it finishes w/a non-numeric
                        esac ;;
                    *) return 2 ;;                        ## Not a whole, normal or sci flt, so invalid;
                esac ;;
            *) return 1 ;;                                ## It does not ends with numerics, hence invalid
        esac
    }


fi
